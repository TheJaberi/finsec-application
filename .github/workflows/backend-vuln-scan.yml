name: Fortified Security Snapshot

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'finsec-api/finsec_api/**'
      - 'finsec-api/app/**'
      - 'finsec-api/finsec_api/requirements.txt'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for proper diff analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep jq
          
      - name: Check for modified Python files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '\.py$' | tr '\n' ' ' || echo "")
          echo "Changed Python files: $CHANGED_FILES"
          echo "python_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
      
      - name: Run Bandit on changed files
        if: steps.changed-files.outputs.python_files != ''
        run: |
          bandit -r ${{ steps.changed-files.outputs.python_files }} -f json -o bandit-results.json || echo "Bandit found issues"
      
      - name: Run Bandit on backend code
        run: |
          bandit -r finsec-api/finsec_api -r finsec-api/app -ll -f json -o bandit-full-results.json || echo "Bandit found issues"
      
      - name: Run Safety dependency check
        run: |
          pip install -U safety  # Ensure latest version
          safety check -r finsec-api/finsec_api/requirements.txt --json > safety-raw.json || echo "Safety found issues"
          echo "Creating a safety report..."
          safety check -r finsec-api/finsec_api/requirements.txt --output text > safety-report.txt || echo "Safety found issues"
          if [ -f safety-report.txt ]; then
            echo "Counting vulnerabilities by severity..."
            CRITICAL_COUNT=$(grep -c "Critical" safety-report.txt || echo "0")
            HIGH_COUNT=$(grep -c "High" safety-report.txt || echo "0") 
            MEDIUM_COUNT=$(grep -c "Medium" safety-report.txt || echo "0")
            LOW_COUNT=$(grep -c "Low" safety-report.txt || echo "0")
            echo "Critical: $CRITICAL_COUNT, High: $HIGH_COUNT, Medium: $MEDIUM_COUNT, Low: $LOW_COUNT" > safety-summary.txt
          fi
        
      - name: Run Semgrep
        run: |
          semgrep --config=p/python --config=p/security-audit finsec-api/finsec_api finsec-api/app --json > semgrep-results.json || echo "Semgrep found issues"
      
      - name: Generate PR comment
        id: generate-comment
        run: |
          echo "Generating security report for PR #${{ github.event.pull_request.number }}"
          
          # Start building the Markdown comment.
          echo "COMMENT<<EOF" >> $GITHUB_ENV
          echo "# 🔰 Fortified Security Snapshot" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "Welcome to the comprehensive security scan report. This snapshot aggregates results from static code analysis (**Bandit**), code pattern inspections (**Semgrep**), and dependency vulnerability assessments (**Safety**)." >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          ## Overview Summary Table
          echo "## Overview" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # Extract Bandit counts from changed files if available.
          if [ -f bandit-results.json ] && [ -s bandit-results.json ]; then
            BANDIT_HIGH=$(jq '[.results[] | select(.issue_severity=="HIGH")] | length' bandit-results.json || echo "0")
            BANDIT_MED=$(jq '[.results[] | select(.issue_severity=="MEDIUM")] | length' bandit-results.json || echo "0")
            BANDIT_LOW=$(jq '[.results[] | select(.issue_severity=="LOW")] | length' bandit-results.json || echo "0")
          else
            BANDIT_HIGH=0
            BANDIT_MED=0
            BANDIT_LOW=0
          fi
          
          # For Semgrep, get total issues count.
          if [ -f semgrep-results.json ] && [ -s semgrep-results.json ]; then
            SEMGREP_COUNT=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
          else
            SEMGREP_COUNT=0
          fi
          
          # Extract Safety counts from the summary.
          if [ -f safety-summary.txt ]; then
            CRITICAL_COUNT=$(grep -o "Critical: [0-9]*" safety-summary.txt | awk '{print $2}')
            HIGH_COUNT=$(grep -o "High: [0-9]*" safety-summary.txt | awk '{print $2}')
            MEDIUM_COUNT=$(grep -o "Medium: [0-9]*" safety-summary.txt | awk '{print $2}')
            LOW_COUNT=$(grep -o "Low: [0-9]*" safety-summary.txt | awk '{print $2}')
          else
            CRITICAL_COUNT=0
            HIGH_COUNT=0
            MEDIUM_COUNT=0
            LOW_COUNT=0
          fi
          
          # Create an overview summary table.
          echo "| Tool | High Severity | Medium Severity | Low Severity |" >> $GITHUB_ENV
          echo "| --- | --- | --- | --- |" >> $GITHUB_ENV
          echo "| **Bandit** | $BANDIT_HIGH | $BANDIT_MED | $BANDIT_LOW |" >> $GITHUB_ENV
          echo "| **Safety** | ${HIGH_COUNT:-0} | ${MEDIUM_COUNT:-0} | ${LOW_COUNT:-0} |" >> $GITHUB_ENV
          echo "| **Semgrep** | $SEMGREP_COUNT | - | - |" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          ## Bandit Details
          echo "## 🔴 Bandit - Static Code Analysis (Changed Files)" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          if [ "$BANDIT_HIGH" -gt 0 ]; then
            echo "#### High Severity Issues:" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            jq -r '.results[] | select(.issue_severity=="HIGH") | "- **" + .issue_severity + "**: *" + (.issue_text|gsub("\n";" ")) + "* in \`" + .filename + "\` at line \`" + (.line_number|tostring) + "\`"' bandit-results.json >> $GITHUB_ENV 2>/dev/null || echo "Error parsing high severity issues" >> $GITHUB_ENV
          else
            echo "✅ No high severity issues found by Bandit." >> $GITHUB_ENV
          fi
          echo "" >> $GITHUB_ENV
          
          ## Semgrep Details
          echo "## 🛡️ Semgrep - Code Pattern Analysis" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          if [ "$SEMGREP_COUNT" -gt 0 ]; then
            echo "Found **$SEMGREP_COUNT** potential issues:" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "| File | Rule | Severity |" >> $GITHUB_ENV
            echo "| --- | --- | --- |" >> $GITHUB_ENV
            jq -r '.results[] | "| " + .path + " | " + .check_id + " | " + .extra.severity + " |"' semgrep-results.json >> $GITHUB_ENV 2>/dev/null
            echo "" >> $GITHUB_ENV
          else
            echo "✅ No issues detected by Semgrep." >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
          fi
          
          ## Safety Details
          echo "## 🐍 Safety - Dependency Vulnerability Check" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          if [ -f safety-summary.txt ] && [ -s safety-summary.txt ]; then
            echo "Dependency vulnerabilities:" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "| Severity | Count |" >> $GITHUB_ENV
            echo "| --- | --- |" >> $GITHUB_ENV
            echo "| **Critical** | ${CRITICAL_COUNT:-0} |" >> $GITHUB_ENV
            echo "| **High** | ${HIGH_COUNT:-0} |" >> $GITHUB_ENV
            echo "| **Medium** | ${MEDIUM_COUNT:-0} |" >> $GITHUB_ENV
            echo "| **Low** | ${LOW_COUNT:-0} |" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            
            # Show a snippet of the detailed report.
            TOTAL_SAFE_COUNT=$(( ${CRITICAL_COUNT:-0} + ${HIGH_COUNT:-0} + ${MEDIUM_COUNT:-0} + ${LOW_COUNT:-0} ))
            if [ "$TOTAL_SAFE_COUNT" -gt 0 ]; then
              echo "#### Vulnerability Details (first 30 lines):" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              head -n 30 safety-report.txt >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              REPORT_LINES=$(wc -l < safety-report.txt)
              if [ "$REPORT_LINES" -gt 30 ]; then
                echo "*Note: Full report truncated. ($REPORT_LINES lines total)*" >> $GITHUB_ENV
              fi
            else
              echo "✅ No dependency vulnerabilities found." >> $GITHUB_ENV
            fi
          else
            echo "⚠️ Safety report not available." >> $GITHUB_ENV
          fi
          echo "" >> $GITHUB_ENV
          
          ## Final Recommendation
          echo "## 💡 Final Recommendation" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          BANDIT_HIGH=${BANDIT_HIGH:-0}
          SAFETY_HIGH=${HIGH_COUNT:-0}  # Using Safety's high count as critical for deps.
          CRITICAL_TOTAL=$((BANDIT_HIGH + SAFETY_HIGH))
          if [ "$CRITICAL_TOTAL" -gt 0 ]; then
            echo "⚠️ **Attention:** Critical or high security issues detected. Please address these issues before merging." >> $GITHUB_ENV
          else
            echo "✅ No critical security issues detected. Consider reviewing any medium or low severity findings for further improvements." >> $GITHUB_ENV
          fi
          echo "" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Post comment to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = process.env.COMMENT;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Fail the workflow if any critical/high security issues exist.
            const criticalRegex = /\\*\\*Attention:\\*\\* Critical or high security issues detected/;
            if (criticalRegex.test(comment)) {
              core.setFailed("Critical security vulnerabilities detected");
            }
